---
- hosts: all
  remote_user: ubuntu
  become: yes
  become_method: sudo
  connection: "ssh"

  roles:
    - deploy-install-openstack-ubuntu
    - deploy-install-terraform-ubuntu
    - geerlingguy.ansible # if running Ubuntu >= 24.04
    - geerlingguy.pip
    - geerlingguy.git

  vars:
    repo_name: 'genome-annotation'   
    github_owner: 'AU-Biocommons'
    repo_dest: '/opt/github-ansible'
    files_root: '/opt'
    files_dest: "{{ files_root }}/apollo_files"
    #ansiblecore_version: '2.16'
    #ansiblecore_venv: "/home/ubuntu/venv/ansiblecore-{{ ansiblecore_version }}"

  pre_tasks:
    - name: "Install postgresql client for pg_dump"
      package:
        name: postgresql-client
        state: latest

    - name: "Add backup_user to sudo group (needed on apollo-backup only)"
      user:
        name: backup_user
        groups: sudo
        append: yes

    #- name: Ensure desired version of ansible core is installed when running Ubuntu < 24.04
    #  pip:
    #    name: "ansible-core=={{ ansiblecore_version }}"
    #    umask: "0022"
    #    virtualenv: "{{ ansiblecore_venv }}"

  post_tasks:
    - name: "Create the github directory with setgid bit so that all members of apollo_admin can update"
      file:
        path: "{{ repo_dest }}"
        owner: "ubuntu"
        group: "apollo_admin"
        state: directory
        mode: 02775

    - name: "Clone git repo into {{ repo_dest }} directory (with umask for g+rwx,o+rx)"
      git:
        repo: "https://github.com/{{ github_owner }}/{{ repo_name }}"
        dest: "{{ repo_dest }}"
        umask: '0002'
        update: yes
      become: yes
      become_user: ubuntu

    - name: Update ansible roles
      command:
        cmd: "ansible-galaxy install -p roles -r requirements.yml"
        chdir: "{{ repo_dest }}/ansible-galaxy"
      become: yes
      become_user: ubuntu

    - name: "Create symbolic link from {{ repo_name }} in ubuntu home to github repo: {{ repo_dest }}"
      file:
        src: "{{ repo_dest }}"
        dest: "/home/ubuntu/{{ repo_name }}"
        state: link
        force: yes
      become: yes
      become_user: ubuntu

    - name: "Create {{ files_dest }} directory with setgid bit so that all members of apollo_admin can update"
      file:
        path: "{{ files_dest }}"
        owner: "ubuntu"
        group: "apollo_admin"
        state: directory
        mode: 02775

    - name: "Create symbolic link from apollo_files in ubuntu home to {{ files_dest }}"
      file:
        src: "{{ files_dest }}"
        dest: "/home/ubuntu/apollo_files"
        state: link
        force: yes
      become: yes
      become_user: ubuntu

    - name: "Create {{ files_dest }}/deploy directory with setgid bit set for apollo_admin group"
      file:
        path: "{{ files_dest }}/deploy"
        owner: "ubuntu"
        group: "apollo_admin"
        state: directory
        mode: 02775

    - name: "Download faToTwoBit from UCSC into {{ files_dest }}/deploy"
      get_url:
        url: https://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/faToTwoBit
        dest: "{{ files_dest }}/deploy/faToTwoBit"
        mode: '0664' # when copied to apollo instances executable bit will be set on destination
      become: yes
      become_user: ubuntu

    - name: "Download blat from UCSC into {{ files_dest }}/deploy"
      get_url:
        url: https://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/blat/blat
        dest: "{{ files_dest }}/deploy/blat"
        mode: '0664' # when copied to apollo instances executable bit will be set on destination
      become: yes
      become_user: ubuntu

    - name: "Create ubuntu user ansible.cfg to specify default private key to use with ansible"
      copy:
        dest: /home/ubuntu/.ansible.cfg
        content: |
          [defaults]
          private_key_file = /home/ubuntu/.ssh/apollo-nectar
        owner: ubuntu
        group: ubuntu
        mode: '0644'
      become: yes
      become_user: ubuntu

    - name: "VAULT_PASS_ALLOW_NULL to ubuntu's .bashrc"
      lineinfile:
        path: /home/ubuntu/.bashrc
        line: "export VAULT_PASS_ALLOW_NULL=1 # required to run ANY ansible playbook without needing to explicitly set VAULT_PASSWORD"

    - name: "Create ubuntu user ssh config for connecting to Apollo VMs"
      copy:
        dest: /home/ubuntu/.ssh/config
        content: |
          # disable ssh agent-loaded identities by default (fixes multi-key auth failures)
          Host *
               IdentitiesOnly yes

          Host apollo-*
               User ubuntu
               IdentityFile /home/ubuntu/.ssh/apollo-nectar
               IdentitiesOnly yes
               StrictHostKeyChecking no
        owner: ubuntu
        group: ubuntu
        mode: '0644'
      become: yes
      become_user: ubuntu

    - name: "Create backup_user ssh config for connecting to Apollo VMs"
      copy:
        dest: /home/backup_user/.ssh/config
        content: |
          Host apollo-*
               User backup_user
               Port 22
               IdentityFile /home/backup_user/.ssh/apollo-nectar-backup_user
               IdentitiesOnly yes
               StrictHostKeyChecking no

    - name: "chown ssh config to backup_user"
      file:
        path: /home/backup_user/.ssh/config
        state: file
        owner: backup_user
        group: backup_user
        mode: '0644'

    - name: "Check if private key /home/ubuntu/.ssh/apollo-nectar exists"
      stat:
        path: /home/ubuntu/.ssh/apollo-nectar
      register: ubuntu_user_key

    - name: "Print warning if apollo-nectar private key doesn't exist"
      debug:
        msg: "Warning: apollo-nectar private key needs to be manually copied to /home/ubuntu/.ssh/apollo-nectar ... ansible connections will fail without this!"
      when: not ubuntu_user_key.stat.exists

    - name: "Check if private key /home/backup_user/.ssh/apollo-nectar-backup_user exists"
      stat:
        path: /home/backup_user/.ssh/apollo-nectar-backup_user
      register: backup_user_key

    - name: "Print warning if backup_user private key doesn't exist"
      debug:
        msg: "Warning: backup_user's private key needs to be manually copied to /home/backup_user/.ssh/apollo-nectar-backup_user ... apollo backups will fail without this!"
      when: not backup_user_key.stat.exists

    - name: "Check if Nectar openrc file /home/ubuntu/BioCommons_Apollo-openrc.sh exists"
      stat:
        path: /home/ubuntu/BioCommons_Apollo-openrc.sh
      register: ubuntu_openrc

    - name: "Print warning if Nectar openrc file doesn't exist"
      debug:
        msg: "Warning: BioCommons_Apollo-openrc.sh needs to be manually downloaded from Nectar and copied to /home/ubuntu/BioCommons_Apollo-openrc.sh ... openstack and terraform cannot be used without this!"
      when: not ubuntu_openrc.stat.exists

    - name: "Check if Nectar Swift openrc file /home/backup_user/app-cred-swift-openrc.sh exists"
      stat:
        path: /home/backup_user/app-cred-swift-openrc.sh
      register: backup_openrc

    - name: "Print warning if Nectar Swift openrc file doesn't exist"
      debug:
        msg: "Warning: app-cred-swift-openrc.sh needs to be manually downloaded from Nectar and copied to /home/backup_user/app-cred-swift-openrc.sh ... apollo backups to Swift object store will fail without this!"
      when: not backup_openrc.stat.exists

    - name: "Check if list of apollos to backup /home/backup_user/list_of_apollo_instances.txt exists"
      stat:
        path: /home/backup_user/list_of_apollo_instances.txt
      register: backup_list_of_apollos

    - name: "Print warning if list_of_apollo_instances.txt doesn't exist"
      debug:
        msg: "Warning: /home/backup_user/list_of_apollo_instances.txt needs to be created or copied from existing list!"
      when: not backup_list_of_apollos.stat.exists

