---
- name: Install build dependencies
  apt:
    name:
      - zlib1g
      - zlib1g-dev
      - libexpat1-dev
      - libpng-dev
      - libgd-dev # replaces libgd2-noxpm-dev
      - build-essential
      - git
      - python3-software-properties
      - python3
      - make
      - ant
    state: present
    update_cache: yes

- name: Install NVM as user (which adds NVM initialisation to .bashrc)
  become: false  # No root access needed here
  shell: |
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash
  args:
    creates: "{{ ansible_env.HOME }}/.nvm"  # Only run if NVM is not already installed

- name: Download and install SDKMAN as user
  become: false
  shell: |
    curl -s "https://get.sdkman.io" | bash
  args:
    creates: "{{ ansible_env.HOME }}/.sdkman"  # Only run if SDKMAN! is not already installed

- name: Add SDKMAN initialisation to .bashrc
  become: false
  lineinfile:
    path: "$HOME/.bashrc"
    line: 'source $HOME/.sdkman/bin/sdkman-init.sh'
    create: yes
    state: present

- name: Install Node.js version 12 using NVM
  become: false
  shell: |
    . {{ ansible_env.HOME }}/.nvm/nvm.sh && nvm install 12
  args:
    executable: /bin/bash
    chdir: "{{ ansible_env.HOME }}"
    creates: "$HOME/.nvm/versions/node/v12.*"

- name: Install Yarn globally
  become: false
  npm:
    name: yarn
    global: yes

- name: "Install Grails {{ grails_version }} using SDKMAN"
  become: false
  shell: |
    . /{{ ansible_env.HOME }}.sdkman/bin/sdkman-init.sh && sdk install grails {{ grails_version }}
  args:
    creates: "$HOME/.sdkman/candidates/grails"

- name: "Install Gradle {{ gradle_version }} using SDKMAN"
  become: false
  shell: |
    . {{ ansible_env.HOME }}/.sdkman/bin/sdkman-init.sh && sdk install gradle {{ gradle version }}
  args:
    creates: "$HOME/.sdkman/candidates/gradle"

- name: "Download Apollo release {{ apollo_version }} tarball"
  become: false
  shell: |
    curl -L https://github.com/GMOD/Apollo/archive/refs/tags/{{ apollo_version }}.tar.gz -o Apollo-{{ apollo_version }}.tar.gz
  args:
    chdir: "{{ download_dir }}"
  register: download_result

- name: "Extract apollo {{ apollo_version }} tarball"
  become: false
  unarchive:
    src: "{{ download_dir }}/Apollo-{{ apollo_version }}.tar.gz"
    dest: "{{ build_dir }}"
    remote_src: yes
  when: download_result.rc == 0

