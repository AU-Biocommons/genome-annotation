---
- name: "Print user name and user id to be created"
  debug: 
    msg: "User Name = {{create_user_name}} - User Id = {{create_user_id}}"

- name: "Create apollo user group"
  group:
    name: "{{create_user_name}}"
    state: "present"

- name: "Create apollo user account"
  user:
    name: "{{create_user_name}}"
    shell: "/bin/bash"
    uid: "{{create_user_id}}"
    state: "present"

- name: "Adding user to group"
  user:
    name: "{{create_user_name}}"
    groups: "{{create_user_name}}"
    append: yes

- name: "Read /etc/ssh/sshd_config content"
  shell:
    cmd: "cat /etc/ssh/sshd_config"
  register: var_sshd_config

- set_fact:
    var_regex_sshd_config: "{{ var_sshd_config.stdout | regex_search('AllowGroups.*') }}"

- name: "Print"
  debug:
    msg: "Resultado de regex = {{ var_regex_sshd_config}}"

- name: "Add groups to /etc/ssh/sshd_config AllowGroups"
  lineinfile:
    dest: "/etc/ssh/sshd_config"
    regexp: "^AllowGroups"
    line: "{{var_regex_sshd_config}} {{create_user_name}}"
    state: present
  notify:
    - Restart sshd

# Setup apollo user home directory
# Note that this role has to be run after the NFS export creates deirectories apollo_data and sourcedata
- name: "check that dir {{create_user_home_dir_ssh_path}} exists and register result"
  stat: "path={{create_user_home_dir_ssh_path}}"
  register: "stat_result"

- name: "Create dir {{create_user_home_dir_ssh_path}} stat_result.stat.exists = {{stat_result.stat.exists}}"
  file:
    path: "{{create_user_home_dir_ssh_path}}"
    state: "directory"
    owner: "{{create_user_name}}"
    group: "{{create_user_name}}"
    mode: "0700"
    recurse: yes
  when: "stat_result.stat.exists == false"

# Note force is set to "no" if the file already exists then the content of the file will be preserved
- name: "Ensure empty file {{create_user_home_dir_ssh_path}}/{{create_user_empty_auth_keys_file_name}} exists"
  copy:
    content: ""
    dest: "{{create_user_home_dir_ssh_path}}/{{create_user_empty_auth_keys_file_name}}"
    force: no
    owner: "{{create_user_name}}"
    group: "{{create_user_name}}"
    mode: "0600"

- name: "check that dir {{create_user_slink_to_apollo_data}} exists and register result"
  stat: "path={{create_user_slink_to_apollo_data}}"
  register: "str_apollo_data" # str in shor for stat_result

- name: "Remove symbolic link {{create_user_slink_from_apollo_data}} if it exists"
  file:
    path: "{{create_user_slink_from_apollo_data}}"
    state: absent
    force: yes
  when: "str_apollo_data.stat.exists == true"

- name: "Create symbolic {{create_user_slink_from_apollo_data}} link to {{create_user_slink_to_apollo_data}}"
  file:
    src: "{{create_user_slink_to_apollo_data}}" # src is the folder to symlink to
    dest: "{{create_user_slink_from_apollo_data}}" # dest is where the symlink will be crated
    state: link
    force: yes
  when: "str_apollo_data.stat.exists == true"

- name: "check that dir {{create_user_slink_to_sourcedata}} exists and register result"
  stat: "path={{create_user_slink_to_sourcedata}}"
  register: "str_sourcedata" # str in shor for stat_result

- name: "Remove symbolic link {{create_user_slink_from_sourcedata}} if it exists"
  file:
    path: "{{create_user_slink_from_sourcedata}}"
    state: absent
    force: yes
  when: "str_sourcedata.stat.exists == true"

- name: "Create symbolic {{create_user_slink_from_sourcedata}} link to {{create_user_slink_to_sourcedata}}"
  file:
    src: "{{create_user_slink_to_sourcedata}}" # src is the folder to symlink to
    dest: "{{create_user_slink_from_sourcedata}}" # dest is where the symlink will be crated
    state: link
    force: yes
  when: "str_sourcedata.stat.exists == true"