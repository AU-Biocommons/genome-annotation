---
# This role to be run by a playbook requires to enter password value through the command line
# use  --extra-vars="apollo_backup_password=<type_password_here>"
apollo_backup_user_postgres_password: "enter_password_through_command_line"
apollo_backup_user_username: "backup_user"
apollo_dbname: "apollo-production"
apollo_docker_postgres_container: "postgres10container"
apollo_docker_bash_cmd: "docker exec -it {{apollo_docker_postgres_container}}"
apollo_docker_postgres_cmd: "docker exec -it {{apollo_docker_postgres_container}} psql -U postgres {{apollo_dbname}} -tAc"

bash_cmd_test_for_user: "grep -c backup_user /etc/passwd"
bash_cmd_create_user: "adduser --uid 9999 --disabled-password --gecos 'Backup User' backup_user"
bash_cmd_create_pgpass: "/bin/bash -c \"echo 'localhost:5432:apollo-production:backup_user:{{apollo_backup_user_postgres_password}}' > ~backup_user/.pgpass; chown backup_user:backup_user ~backup_user/.pgpass\""

postgresql_conf_file: "/var/lib/postgresql/data/postgresql.conf"
# note to escape single quotes in sed
#      use shell string concatenation of adjacent strings and escape the embedded quote using shell escaping
#      to get listen_addresses = '*', use:
#          listen_addresses = '\''*'\''
# ref: https://stackoverflow.com/a/24509931
#      then escape \ to \\ for passing from ansible to docker to sed
#          listen_addresses = '\\''*'\\''
#      Also need to escape the single quotes within YAML as '' (to pass to Bash)
# ref: https://blog.christophe-henry.dev/2021/10/13/devops-101-how-deal-with-regexes-in-yaml.html
bash_cmd_listen_addresses: "sed -i ''s/^listen_addresses =.*/listen_addresses = '\\''*'\\''/'' {{postgresql_conf_file}}"

postgres_db_conf_file: "/var/lib/postgresql/data/pg_hba.conf"
trust_apollo_network: "host    all             all             192.168.0.0/24          trust"
bash_cmd_test_trust_exists: "grep -cxF '{{trust_apollo_network}}' {{postgres_db_conf_file}}"
bash_cmd_insert_trust: "sed -i '/^host\\s*all.*127.0.0.1[/]32\\s*trust/a {{trust_apollo_network}}' {{postgres_db_conf_file}}"

postgres_cmd_reload_postgres_config: "\"SELECT pg_reload_conf();\""

postgres_cmd_test_user_exists: "\"SELECT COUNT(1) FROM pg_roles WHERE rolname='{{apollo_backup_user_username}}';\""
postgres_cmd_create_user: "\"CREATE USER {{apollo_backup_user_username}} WITH PASSWORD '{{apollo_backup_user_postgres_password}}';\""
postgres_cmd_grant_tables: "\"GRANT SELECT ON ALL TABLES IN SCHEMA public TO {{apollo_backup_user_username}};\""
postgres_cmd_grant_sequences: "\"GRANT SELECT ON ALL SEQUENCES IN SCHEMA public TO {{apollo_backup_user_username}};\""
postgres_cmd_alter_grant_tables: "\"ALTER DEFAULT PRIVILEGES GRANT SELECT ON TABLES TO {{apollo_backup_user_username}};\""
postgres_cmd_alter_grant_sequences: "\"ALTER DEFAULT PRIVILEGES GRANT SELECT ON SEQUENCES TO {{apollo_backup_user_username}};\""

