---
- name: "Allow connections from backup server"
  ufw:
    rule: allow
    proto: tcp
    port: '5432'
    src: '{{ backup_server_cidr }}'

# Note that this requires that common-create-admin-users-logins role has already been run
# to create backup_user with associated login, group and sudo permissions
- name: "create .pgpass for backup_user"
  copy:
    dest: "/home/backup_user/.pgpass"
    content: "localhost:5432:{{ postgres_db_name}}:backup_user:{{ postgres_backup_user_password }}"
    mode: "0600"
    group: "backup_user"
    owner: "backup_user"

# the following is taken from https://github.com/usegalaxy-au/infrastructure/blob/master/roles/move-postgresql-data-directory/tasks/main.yml
- name: get postgresql version string
  shell:
    cmd: pg_config --version
  register: version_string

- name: "output postgresql version_string"
  debug: 
    msg: "'pg_config --version' returns: {{ version_string.stdout }}"
# eg: PostgreSQL 14.11 (Ubuntu 14.11-0ubuntu0.22.04.1)

- name: set postgresql version major
  set_fact:
    postgresql_version_major: "{{ version_string.stdout | regex_findall('PostgreSQL ([0-9]+).') | first }}"

- name: "output postgresql_version_major"
  debug: 
    msg: "postgresql_version_major: {{ postgresql_version_major }}"

- name: set postgresql location for Ubuntu
  set_fact:
    postgres_conf_dir: "/etc/postgresql/{{ postgresql_version_major }}/main"

- name: "ensure listen_addresses = '*' in {{ postgres_conf_dir }}/postgresql.conf"
  lineinfile:
    dest: "{{ postgres_conf_dir }}/postgresql.conf"
    regexp: "^#?listen_addresses ="
    line: "listen_addresses = '*'                 # what IP address(es) to listen on;"
    state: present

- name: "trust backup_user connections to databases from apollo-backup {{ backup_server_cidr }} by configuring in {{ postgres_conf_dir }}/pg_hba.conf"
  lineinfile:
    dest: "{{ postgres_conf_dir }}/pg_hba.conf"
    line: "host    all             backup_user     {{ backup_server_cidr }}          trust"
    state: present

- name: "restart postgres to instigate changes to config"
  systemd:
    state: "restarted"
    name: "postgresql@{{ postgresql_version_major }}-main"

# rather than restarting postgres service is it better to reload postgres config from psql?
#- name: "reload postgres config to instigate changes to config"
#  become: true
#  become_user: postgres
#  command: "{{ bash_cmd_postgres }} {{ postgres_cmd_reload_postgres_config }}"
#  vars:
#    ansible_ssh_pipelining: true
#  register: "pg_reload_conf"
#  #changed_when: "pg_reload_conf.rc == 0"
#  changed_when: pg_reload_conf.stdout == "t"
#
#- name: "Print command executed from postgres_cmd_reload_postgres_config"
#  debug:
#    msg: "{{ bash_cmd_postgres }} {{ postgres_cmd_reload_postgres_config }}"

# NOTE: in the following psql tasks need to use ansible_ssh_pipelining with become_user postgres
#       to avoid errors like
#         Failed to set permissions on the temporary files Ansible needs to create when becoming an unprivileged user (rc: 1, err: chmod: invalid mode: ‘A+user:postgres:rx:allow’
#       see: https://github.com/ansible/ansible/issues/16048#issuecomment-229012509
#       as used by geerlingguy / ansible-role-postgresql

- name: "check if backup_user exists in database"
  become: true
  become_user: postgres
  command: "{{ bash_cmd_postgres }} {{ postgres_cmd_test_user_exists }}"
  vars:
    ansible_ssh_pipelining: true
  register: "backup_user_exists"

- name: "Print command executed from postgres_cmd_test_user_exists"
  debug:
    msg: "{{ bash_cmd_postgres }} {{ postgres_cmd_test_user_exists }}"

- name: "create backup_user user in postgres if user doesn't exist"
  become: true
  become_user: postgres
  command: "{{ bash_cmd_postgres }} {{ postgres_cmd_create_user }}"
  vars:
    ansible_ssh_pipelining: true
  when: backup_user_exists.stdout == "0"

- name: "Print command executed from postgres_cmd_create_user if backup_user_exists.stdout == 0"
  debug:
    msg: "{{ bash_cmd_postgres }} {{ postgres_cmd_create_user }}"
  when: backup_user_exists.stdout == "0"

- name: "postgres grant select on tables"
  become: true
  become_user: postgres
  command: "{{ bash_cmd_postgres }} {{ postgres_cmd_grant_tables }}"
  vars:
    ansible_ssh_pipelining: true

- name: "Print command executed from postgres_cmd_grant_tables"
  debug:
    msg: "{{ bash_cmd_postgres }} {{ postgres_cmd_grant_tables }}"

- name: "postgres grant select on sequences"
  become: true
  become_user: postgres
  command: "{{ bash_cmd_postgres }} {{ postgres_cmd_grant_sequences }}"
  vars:
    ansible_ssh_pipelining: true

- name: "Print command executed from postgres_cmd_grant_sequences"
  debug:
    msg: "{{ bash_cmd_postgres }} {{ postgres_cmd_grant_sequences }}"

- name: "postgres alter default privileges grant select on tables"
  become: true
  become_user: postgres
  command: "{{ bash_cmd_postgres }} {{ postgres_cmd_alter_grant_tables }}"
  vars:
    ansible_ssh_pipelining: true

- name: "Print command executed from postgres_cmd_alter_grant_tables"
  debug:
    msg: "{{ bash_cmd_postgres }} {{ postgres_cmd_alter_grant_tables }}"

- name: "postgres alter default privileges grant select on sequences"
  become: true
  become_user: postgres
  command: "{{ bash_cmd_postgres }} {{ postgres_cmd_alter_grant_sequences }}"
  vars:
    ansible_ssh_pipelining: true

- name: "Print command executed from postgres_cmd_alter_grant_sequences"
  debug:
    msg: "{{ bash_cmd_postgres }} {{ postgres_cmd_alter_grant_sequences }}"

