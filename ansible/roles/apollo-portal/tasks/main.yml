---

- name: print server directories
  debug:
    msg: |
      project_root: {{ project_root }}
      venv_root: {{ venv_root }}
      setup_root: {{ setup_root }}
      webserver_root: {{ webserver_root }}
      webserver_log_root: {{ webserver_log_root }}
      webserver_media_root: {{ webserver_media_root }}
      webserver_static_root: {{ webserver_static_root }}

- name: create setup directory
  file:
    path: "{{ setup_root }}"
    state: directory

- name: create webserver parent directory
  file:
    path: "{{ webserver_root | dirname }}"
    state: directory

- name: install systems dependencies
  ansible.builtin.package:
    name:
      - "python{{ python_version }}"
      - python3-pip

- name: add ubuntu user to www-data group"
  user:
    name: "ubuntu"
    groups: "www-data" 
    append: yes

- name: clone git repository for apollo_portal
  ansible.builtin.git:
    repo: "{{ apollo_portal_git_url }}"
    version: "{{ apollo_portal_git_branch }}"
    dest: "{{ project_root }}"
    clone: yes
    force: yes

- name: create apollo_portal media directory
  file:
    path: "{{ webserver_media_root }}"
    owner: ubuntu
    group: www-data
    mode: '2775'
    state: directory

- name: create apollo_portal logs directory
  file:
    path: "{{ webserver_log_root }}"
    owner: ubuntu
    group: www-data
    mode: '2775'
    state: directory

- name: template webserver configuration
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop: "{{ apollo_portal.templates }}"

- name: copy webserver configuration
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop: "{{ apollo_portal.files }}"

- name: link to enable nginx virtualhost
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ inventory_hostname }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ inventory_hostname }}"
    state: link

- name: Install Python virtualenv
  pip:
    name: virtualenv
    executable: pip3

- name: Install Python requirements into venv
  pip:
    requirements: "{{ project_root }}/requirements.txt"
    virtualenv: "{{ venv_root }}"
    virtualenv_python: "python{{ python_version }}"

- name: run apollo_portal setup script
  command: "bash {{ setup_root }}/setup.sh"

- name: create and install SSL certificate with letsencrypt
  command: |
    certbot \
    --nginx \
    --noninteractive \
    --agree-tos \
    --redirect \
    --email {{ certbot_renew_email }} \
    -d {{ inventory_hostname }}
  when: certbot_ssl

- name: "add extra domain {{ portal_extra_domain }} to letsencrypt certificate {{ inventory_hostname }}"
  command: |
    certbot certonly \
    --cert-name {{ inventory_hostname }} \
    --nginx \
    --noninteractive \
    --agree-tos \
    --redirect \
    --email {{ certbot_renew_email }} \
    --domains {{ inventory_hostname }},{{ portal_extra_domain }}
  when: certbot_ssl and portal_extra_domain is defined

- name: Ensure apollo_portal superuser login
  shell: |
    cd {{ webserver_root }} && \
    . {{ venv_root }}/bin/activate && \
    export DJANGO_SUPERUSER_PASSWORD={{ admin_user.password }} && \
    python manage.py createsuperuser --noinput \
      --email {{ admin_user.email }} \
      --first_name {{ admin_user.first_name }} \
      --last_name {{ admin_user.last_name }}
  ignore_errors: yes
  when: admin_user.email and not skip_database_migration

- name: set project_root permissions
  ansible.builtin.file:
    dest: "{{ project_root }}"
    owner: ubuntu
    group: ubuntu
    recurse: yes

- name: update media file ownership and permissions
  file: dest={{ webserver_media_root }} owner=ubuntu group=www-data mode=u=rwX,g=rwX,o=rX recurse=yes

- name: apply setgid to media directories
  command: find {{ webserver_media_root }} -type d -exec chmod g+s {} \;

- name: update log file ownership and permissions
  file: dest={{ webserver_log_root }} owner=ubuntu group=www-data mode=u=rwX,g=rwX,o=rX recurse=yes

- name: apply setgid to log directories
  command: find {{ webserver_log_root }} -type d -exec chmod g+s {} \;

- name: make update.sh executable
  file: dest=/home/ubuntu/update.sh mode=a+x
