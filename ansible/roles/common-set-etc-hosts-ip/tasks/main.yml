---
- name: "set fact"
  set_fact:
    invetory_host_full_domain_name: "{{ target_test_domain if target_environment == 'test' else inventory_hostname }}"
    etc_hosts_dir_path: "{{ target_test_dir if target_environment == 'test' else set_etc_hosts_dir_path }}"
    invetory_host_private_ip: "{{ private_ip }}"

- name: "debug invetory_host_full_domain_name"
  debug:
    msg: " Inventory host name = {{ invetory_host_full_domain_name }} - dir path = {{etc_hosts_dir_path}} - ip = {{invetory_host_private_ip}}"

- name: "set fact"
  set_fact:
    host_machine_simple_name: "{{ invetory_host_full_domain_name.split('.')[0] }}"

- name: "debug host/machine simple name"
  debug:
    msg: "Host/machine simple name = {{ host_machine_simple_name }}"

- name: "Read {{ etc_hosts_dir_path }} content"
  shell: "cat {{ etc_hosts_dir_path }} | grep {{host_machine_simple_name}}"
  register: var_etc_hosts
  # There are two ways this can be done as per below SO question
  # https://stackoverflow.com/questions/50440515/ansible-error-on-shell-command-returning-zero
  # using "ignore_errors: true"
  # or as below which I think it's a cleaner way
  failed_when: var_etc_hosts.rc != 1 and var_etc_hosts.rc != 0

- set_fact:
    var_regex_sshd_config: "{{ var_etc_hosts.stdout }}"

- name: "debug result of regex"
  debug:
    msg: "Result of regex = {{ var_regex_sshd_config}}"

- name: "Replace IP address in hosts file if host already exists"
  lineinfile:
    dest: "{{ etc_hosts_dir_path }}"
    regexp: '.*{{ host_machine_simple_name }}$'
    line: "{{ invetory_host_private_ip }}    {{ host_machine_simple_name }}"
    state: present
  when: var_etc_hosts.stdout != ""

- name: "Append IP address and host name in hosts file at the end of the file"
  lineinfile:
    dest: "{{ etc_hosts_dir_path }}"
    line: "{{ invetory_host_private_ip }}    {{ host_machine_simple_name }}"
  when: var_etc_hosts.stdout == ""
