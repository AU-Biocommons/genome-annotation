---
# set test_etc_hosts_path first to avoid undefined test variable in next step when using prod environment
- name: "set test_etc_hosts_path to supplied value (test) or default (prod)"
  set_fact:
    test_etc_hosts_path: "{{ '{{target_dev_dir}}/hosts' if target_dev_dir is defined else '/etc/hosts' }}"

- name: "set fact"
  set_fact:
    etc_hosts_dir_path: "{{ '{{test_etc_hosts_path}}' if target_environment == 'test' else set_etc_hosts_dir_path }}"
    inventory_hostname_for_ip: "{{ hostname_for_ip }}"
    invetory_host_private_ip: "{{ private_ip }}"

- name: "debug invetory_host_full_domain_name"
  debug:
    msg: "Inventory host name = {{ inventory_hostname_for_ip }} - dir path = {{etc_hosts_dir_path}} - ip = {{invetory_host_private_ip}}"

- name: "Read {{ etc_hosts_dir_path }} content"
  shell: "cat {{ etc_hosts_dir_path }} | grep {{inventory_hostname_for_ip}}"
  register: var_etc_hosts
  # There are two ways this can be done as per below SO question
  # https://stackoverflow.com/questions/50440515/ansible-error-on-shell-command-returning-zero
  # using "ignore_errors: true"
  # or as below which I think it's a cleaner way
  failed_when: var_etc_hosts.rc != 1 and var_etc_hosts.rc != 0

- name: "set facts"
  set_fact:
    var_regex_etc_hosts: "{{ var_etc_hosts.stdout }}"
    var_line_to_append: "{{ invetory_host_private_ip }}    {{ inventory_hostname_for_ip }}"

- name: "debug result of regex"
  debug:
    msg: "Result of regex = {{ var_regex_etc_hosts }}"

- name: "debug line to append"
  debug:
    msg: "Line to append = {{ var_line_to_append }}"

- name: "Replace IP address in hosts file if host already exists"
  lineinfile:
    dest: "{{ etc_hosts_dir_path }}"
    regexp: '.*{{ inventory_hostname_for_ip }}$'
    line: "{{ var_line_to_append }}"
    state: present
  when: var_etc_hosts.stdout != ""

- name: "Append IP address and host name in hosts file at the end of the file"
  lineinfile:
    dest: "{{ etc_hosts_dir_path }}"
    line: "{{ var_line_to_append }}"
  when: var_etc_hosts.stdout == ""
