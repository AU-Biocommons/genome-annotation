---
- name: Install required APT packages
  apt:
    pkg:
      - apt-transport-https
      - software-properties-common
      - curl
      - gnupg # needed for dearmor of grafana apt keyring
      - prometheus
    state: present
    update_cache: yes

- name: Grafana APT keyring + repo setup
  tags: [grafana_keyring]
  block:
  - name: Ensure APT keyrings directory exists
    file:
      path: "{{ grafana_keyring_path | dirname }}"
      state: directory
      mode: "0755"

  - name: Download Grafana ASCII-armored GPG key
    get_url:
      url: "{{ grafana_key_url }}"
      dest: "{{ grafana_keyring_path }}.asc"
      mode: "0644"
    register: grafana_key_ascii

  - name: Convert Grafana key to dearmored keyring
    ansible.builtin.command:
      cmd: "gpg --dearmor -o {{ grafana_keyring_path }} {{ grafana_keyring_path }}.asc"
    when: grafana_key_ascii is changed or not (grafana_keyring_path is exists)
    register: grafana_keyring_cmd
    changed_when: grafana_keyring_cmd.rc == 0

  - name: Set keyring permissions for APT
    file:
      path: "{{ grafana_keyring_path }}"
      mode: "0644"

  # Remove the old repo line if it exists (packages.grafana.com without signed-by)
  - name: Remove legacy Grafana repo entry
    apt_repository:
      repo: "{{ grafana_legacy_repo }}"
      filename: "grafana"
      state: absent
    register: removed_legacy_repo

  - name: Add Grafana APT repository (new style)
    apt_repository:
      repo: "deb [signed-by={{ grafana_keyring_path }}] {{ grafana_repo_url }} {{ grafana_repo_components }}"
      filename: "grafana"
      state: present
      update_cache: yes

  # clean up legacy global key to silence warnings
  - name: Remove expired legacy Grafana key from trusted.gpg (ignore if absent)
    command:
      cmd: "gpg --batch --yes --no-default-keyring --keyring /etc/apt/trusted.gpg --delete-key {{ grafana_legacy_key }}"
    register: _remove_legacy_key
    changed_when: "'not found' not in (_remove_legacy_key.stderr | default(''))"
    failed_when: false

- name: Install Grafana
  apt:
    name: grafana
    state: present
    update_cache: yes
  when: not ansible_check_mode

- name: Set Grafana admin password
  lineinfile:
    path: /etc/grafana/grafana.ini
    regexp: '^;?admin_password ='
    line: "admin_password = {{ grafana_admin_password }}"
    state: present
  when: not ansible_check_mode # file won't exist

- name: Set Grafana domain
  lineinfile:
    path: /etc/grafana/grafana.ini
    regexp: '^;?domain ='
    line: "domain = {{ grafana_domain }}"
    state: present
  when: not ansible_check_mode # file won't exist

- name: Ensure Grafana is started and enabled
  systemd:
    name: grafana-server
    enabled: yes
    state: started
  when: not ansible_check_mode # Grafa not yet installed

- name: Check if Grafana TLS certificate exists
  stat:
    path: "/etc/letsencrypt/live/{{ grafana_domain }}/fullchain.pem"
  register: grafana_cert

- name: Deploy NGINX configuration for Grafana
  template:
    src: grafana.nginx.conf.j2
    dest: /etc/nginx/sites-available/grafana
    owner: root
    group: root
    mode: '0644'
  vars:
    cert_present: "{{ grafana_cert.stat.exists }}"

- name: Enable Grafana site
  file:
    src: /etc/nginx/sites-available/grafana
    dest: /etc/nginx/sites-enabled/grafana
    state: link
  when: not ansible_check_mode # file won't exist

- name: Remove default NGINX site
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  when: not ansible_check_mode # file won't exist

- name: Reload NGINX after initial config
  systemd:
    name: nginx
    state: reloaded

- name: Obtain TLS certificate with Let's Encrypt
  command: >
    certbot {% if target_environment == 'test' %}--test-cert{% endif %}
    --nginx -n --agree-tos --email {{ certbot_renew_email }}
    --domains {{ grafana_domain }}
  args:
    creates: "/etc/letsencrypt/live/{{ grafana_domain }}/fullchain.pem"
  notify: Reload nginx
  when: not ansible_check_mode # nginx service doesn't exist yet

- name: Provision Prometheus data source for Grafana
  copy:
    dest: /etc/grafana/provisioning/datasources/prometheus.yml
    content: |
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          access: proxy
          url: http://localhost:9090
          isDefault: true
    owner: root
    group: grafana
    mode: '0644'
  notify: Restart grafana-server


